# shellcheck shell=bash disable=2154

# This is being reworked to use base gnu and bash stuff for use on servers.

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Source global definitions
if [[ -f /etc/bashrc ]]; then
	. /etc/bashrc
fi

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
XDG_CACHE_HOME="${XDG_CACHE_HOME:-${HOME}/.cache}"
XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
XDG_STATE_HOME="${XDG_STATE_HOME:-${HOME}/.local/state}"
XDG_BIN_HOME="${XDG_BIN_HOME:-${HOME}/.local/bin}"
export XDG_CACHE_HOME XDG_CONFIG_HOME XDG_DATA_HOME XDG_STATE_HOME XDG_BIN_HOME

SYSTEMD_LESSCHARSET="utf-8"
SYSTEMD_PAGERSECURE="1"
SYSTEMD_COLORS="256"
SYSTEMD_URLIFY="1"
SYSTEMD_EDITOR="nvim"
SYSTEMD_LOG_COLOR="1"
export SYSTEMD_LESSCHARSET SYSTEMD_PAGERSECURE SYSTEMD_COLORS SYSTEMD_URLIFY SYSTEMD_EDITOR SYSTEMD_LOG_COLOR

# dirs and files that need to be manually made
mkdir -p "${XDG_STATE_HOME}/bash"
touch "${XDG_STATE_HOME}/bash/history"

HISTTIMEFORMAT='%F %T '
HISTFILE=${XDG_STATE_HOME}/bash/history
HISTSIZE=20000
HISTFILESIZE=${HISTSIZE}
HISTCONTROL=ignoreboth:erasedups
HISTIGNORE="ls:eza:cl:cd:top:exit:date"
export HISTTIMEFORMAT HISTFILE HISTSIZE HISTFILESIZE HISTCONTROL HISTIGNORE

# # CHANGE TITLE OF TERMINALS
# case ${TERM} in
# xterm* | rxvt* | Eterm* | aterm | kterm | gnome* | alacritty | st | konsole*)
# 	PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
# 	;;
# screen*)
# 	PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
# 	;;
# *)
# 	echo "ERROR"
# 	;;
# esac

# Enable bash programmable completion features in interactive shells
# shellcheck disable=SC1091
if ! shopt -oq posix; then
	if [[ -f /usr/share/bash-completion/bash_completion ]]; then
		source /usr/share/bash-completion/bash_completion
	elif [[ -f /etc/bash_completion ]]; then
		source /etc/bash_completion
	fi
fi

# Enhanced interactive shell readline bindings
case $- in
*i*)
	# Case-insensitive completion
	bind 'set completion-ignore-case on'
	# Show completions on ambiguous input
	bind 'set show-all-if-ambiguous on'
	# Search backward/forward in history with Up/Down
	bind '"\e[A": history-search-backward'
	bind '"\e[B": history-search-forward'
	# Visual bell instead of audible
	bind 'set bell-style visible'
	# Menu completion (cycles through), replaces regular completion
	# bind '"\t": menu-complete'
	;;
*)
	# Non-interactive shell: do nothing
	;;
esac

# eval stuff
#[[ -x "$(command -v starship)" ]] && eval "$(starship init bash)"
[[ -x "$(command -v direnv)" ]] && eval "$(direnv hook bash)"

if command -v starship >/dev/null 2>&1; then
	eval "$(starship init bash)"
else
	PS1='\[\033[01;32m\]\u@\h \[\033[01;34m\]\w \$\[\033[00m\] '
fi

# Bash shopt options

#set -o vi                        # Set vi editing mode
#set -o noclobber                 # Prevent file overwrite on stdout redirection; use `>|` to force

shopt -s autocd # Prepend cd to directory names automatically
# shopt -s assoc_expand_once
shopt -s cdable_vars # CD across the filesystem as if you're in that dir
shopt -s cdspell     # Correct spelling errors in arguments supplied to cd
# shopt -s checkhash
shopt -s checkjobs
shopt -s checkwinsize # Update window size after every command
shopt -s cmdhist      # Save multi-line commands as one command
# shopt -s compat31
# shopt -s compat32
# shopt -s compat40
# shopt -s compat41
# shopt -s compat42
# shopt -s compat43
# shopt -s compat44
shopt -s complete_fullquote
shopt -s direxpand
shopt -s dirspell # Correct spelling errors during tab-completion
shopt -s dotglob
shopt -s execfail
shopt -s expand_aliases
# shopt -s extdebug
shopt -s extglob # Turn on extended globbing
# shopt -s extquote
# shopt -s failglob
# shopt -s force_fignore
# shopt -s globasciiranges
shopt -s globstar # Turn on recursive globbing (enables ** to recurse all directories)
# shopt -s gnu_errfmt
shopt -s histappend # append to history, don't overwrite it
shopt -s histreedit
shopt -s histverify
shopt -s hostcomplete
# shopt -s huponexit
# shopt -s inherit_errexit
shopt -s interactive_comments
shopt -s lastpipe
# shopt -s lithist
# shopt -s localvar_inherit
# shopt -s localvar_unset
# shopt -s login_shell
# shopt -s mailwarn
shopt -s no_empty_cmd_completion
shopt -s nocaseglob # Case-insensitive globbing (used in pathname expansion)
# shopt -s nocasematch
shopt -s nullglob
# shopt -s progcomp
# shopt -s progcomp_alias
# shopt -s promptvars
# shopt -s restricted_shell
shopt -s shift_verbose
shopt -s sourcepath
shopt -s xpg_echo

alias ls='ls -aF --color=auto --group-directories-first'
alias ..='cd .. && cl'
alias cl='clear && ls'

cd() {
	clear
	if [[ $# -eq 0 ]]; then
		echo -e "\n\033[0;32mSelect a directory:\033[0m\n"
		select dir in */; do
			if [[ -n "${dir}" ]]; then
				clear
				builtin cd "${dir}" || return
				ls -aF --group-directories-first --color=auto
				echo -e "\n\033[0;31mInvalid selection.\033[0m"
			fi
			break
		done
	else
		clear
		builtin cd "$@" || return
		ls -aF --group-directories-first --color=auto
	fi
}

rm() {
	clear
	if [[ $# -eq 0 ]]; then
		echo -e "\n\033[0;32mSelect files/directories to remove (choose one at a time):\033[0m\n"
		select file in * .*; do
			if [[ -n "${file}" ]]; then
				read -r -p "$(echo -e '\n\033[1;33mAre you sure you want to remove \033[1;34m'"${file}"'\033[1;33m? [y/N] \033[0m')" confirm
				if [[ "${confirm}" =~ ^[Yy]$ ]]; then
					command rm -rf -- "${file}"
					clear
					echo -e "\n\033[1;31m'${file}' removed.\033[0m"
					ls -aF --group-directories-first --color=auto
				else
					echo -e "\n\033[0;33mSkipping '${file}'.\033[0m"
				fi
			else
				echo -e "\n\033[0;31mInvalid selection.\033[0m"
			fi
			break
		done
		clear
		ls -aF --group-directories-first --color=auto
	else
		clear
		command rm "$@"
		ls -aF --group-directories-first --color=auto
	fi
}

n() {
	if [[ $# -eq 0 ]]; then
		clear
		echo -e "\n\033[0;32mSelect a file to open:\033[0m\n"
		# List only regular files (not directories)
		files=()
		for file in * .*; do
			[[ -f "${file}" ]] && files+=("${file}")
		done
		if [[ ${#files[@]} -eq 0 ]]; then
			echo -e "\n\033[0;31mNo files to select.\033[0m\n"
			return 1
		fi

		PS3=$'\n'"$(echo -e '\033[1;33mEnter the number of the file to open: \033[0m')"
		select file in "${files[@]}"; do
			if [[ -n "${file}" ]]; then
				echo -e "\033[1;34mOpening file: ${file}\033[0m"
				command nano "${file}"
			else
				echo -e "\n\033[0;31mInvalid selection.\033[0m"
			fi
			break
		done
	else
		command nano "$@"
	fi
	return $?
}
