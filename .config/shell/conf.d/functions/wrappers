#!/usr/bin/env bash

# $HOME/.config/shell/conf.d/functions.sh

## SG
##
## Description :
## Aliases, wrappers, and general improvements on basic commands for interactive shells.
## Designed to work with the bash shell, may or may not work with others.
## Just source this file in your bashrc, and you're done.
## For these to work you need fzf, bat, exa, micro installed.
## I use arch btw.

## Name: bash_functions

# Contains sections for :
# misc, colors, cd, ls-exa, cat-bat, rm, cp, mv, man, help, micro, env, alias, history, export, touch, mkdir, info

# Requires installed :
# exa, fd, fzf, micro, bat, feh, gifsicle, glow, evince, links, zenity, chafa

EXA_OPTS="\
--all \
--color=always \
--color-scale \
--icons \
--group-directories-first \
--classify"

BAT_OPTS="\
--plain \
--paging=never \
--decorations=never \
--color=always"

FZF_OPTS="\
--cycle \
--reverse \
--border \
--pointer=ïƒšïƒš \
--prompt=Search: \
--bind shift-up:preview-page-up \
--bind shift-down:preview-page-down \
--bind ctrl-c:abort,ctrl-q:abort,esc:abort"

#FD_OPTS=''

# ----------------- misc ----------------- misc ----------------- misc ----------------- misc -----------------

function strip_icons {
  rev \
    | cut -f1 -d' ' \
    | rev \
    | sed  \
      -e 's/\[[0-9];[0-9][0-9]m//g' \
      -e 's/\[[0-9];[0-9];[0-9][0-9]m//g' \
      -e 's/\[0m//g' \
      -e 's/\[1m//g' \
      -e 's///g'
}

mktest () {
    mkdir test
    touch ./test/poop
    echo "this is a poop file" >> ./test/poop
    touch ./test/caca
    echo "this is a caca file" >> ./test/caca
    touch ./test/poopy
    echo "this is a poopy file" >> ./test/poopy
    mkdir test2
}


ex () {

if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   tar xf $1    ;;
      *.tar)       tar xf $1    ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
else
    echo "$1 is not a valid file"
fi
}

# ----------------- colors ----------------- colors ----------------- colors ----------------- colors -----------------
## Description :
## Easy to use, simple color wrappers for the echo command.

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
GREY="$(tput setaf 8)"

BOLD="$(tput bold)"
UNDERLINE="$(tput sgr 0 1)"
BLINK="$(tput blink)"
INVERT="$(tput sgr 1 0)"
NORMAL="$(tput sgr0)"

## Color Functions
red() { echo -e "${RED}$1${NORMAL}"; } ;
green() { echo -e "${GREEN}$1${NORMAL}"; } ;
yellow() { echo -e "${YELLOW}$1${NORMAL}"; } ;
blue() { echo -e "${BLUE}$1${NORMAL}"; } ;
magenta() { echo -e "${MAGENTA}$1${NORMAL}"; } ;
cyan() { echo -e "${CYAN}$1${NORMAL}"; } ;
white() { echo -e "${WHITE}$1${NORMAL}"; } ;
grey() { echo -e "${GREY}$1${NORMAL}"; } ;

# ----------------- LS-EXA
## Description :
## Aliases and improvements for exa, ls commands.

# Base, all files, all dirs.
alias ls="/usr/bin/exa $EXA_OPTS --grid"
# Long format.
alias ll="/usr/bin/exa $EXA_OPTS --git --long"
# Tree listing.
alias lt="/usr/bin/exa $EXA_OPTS --tree"

# ----------------- cd
## Description :
## Aliases and improvements for cd commands.

# If "cd" command is used alone, use fzf to serch dirs, with exa tree preview.
# Select one, cd into it, clear the screen, then use exa to list.
function cd() {
if [[ "$#" -eq 0 ]]; then
    local dirs error
    # Find files/dirs with fd, pipe to fzf. Added files to search.
        dirs=$(/usr/bin/fd --hidden \
	                       --color=always \
	                       --no-ignore-vcs \
                           --maxdepth=1 \
                           --type=d \
	           | /usr/bin/fzf $FZF_OPTS --ansi \
	                                    --preview-window=bottom,80% \
	                                    --preview="fzf-preview "./{}"" )
   	builtin cd "$dirs"
    /usr/bin/clear ; /usr/bin/exa $EXA_OPTS
else
	builtin cd "$@"
    if [[ "$1" != "--help"  ]] ; then
	   	/usr/bin/clear ; /usr/bin/exa $EXA_OPTS
    fi
fi
}

# CD aliases
alias ..="builtin cd .. && cl"
alias cl="command /usr/bin/clear && ls"

# Goes up a specified number of directories  (i.e. up 4)
function up() (

local d=""
local limit="$1"

# Default to limit of 1
if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
	limit=1
fi

for ((i=1;i<=limit;i++)); do
	d="../$d"
done

#Perform cd. Show error if cd fails
if ! cd "$d"; then
	echo "Couldn't go up $limit dirs.";
fi
)

## ----------------- cat-bat
## Description :
## Aliases and improvements on cat, bat commands.

# If bat exhists, use these.
if [[ -f /usr/bin/batcat ]] ; then
    alias cat="/usr/bin/batcat --color=always --decorations=never --paging=never"
    alias bat="/usr/bin/batcat --color=always --decorations=never --paging=never"
elif [[ -f /usr/bin/bat ]] ; then
    alias cat="/usr/bin/bat --color=always --decorations=never --paging=never"
    alias bat="/usr/bin/bat --color=always --decorations=never --paging=never"
fi

# ----------------- rm
## Description :
## Aliases and improvements on remove command.

# If rm without options is used, use fzf to select multiple files, with bat previews, and remove them. Use tab to select multiple files.
function rm() (

local SOURCES

if [[ "$#" -eq 0 ]] ; then

	# Prompt user interactively to select multiple files with tab + fuzzy search.
	SOURCES=$(/usr/bin/fd --hidden \
    	                  --color=always \
   	    	              --no-ignore-vcs \
            	          --maxdepth=1 \
        	| /usr/bin/fzf $FZF_OPTS --ansi \
        							 --multi \
        							 --marker='rm' \
            	                     --preview="fzf-preview "./{}"" \
                	                 --preview-window=right,75% )
    echo -e "\n"
    # We use xargs to capture filenames with spaces in them properly.
    echo "$SOURCES" | xargs -I '{}' rm -rf --verbose {}
    echo -e "\n"
    /usr/bin/exa $EXA_OPTS
else
    echo -e "\n"
    /usr/bin/rm -rfv "$@"
    echo -e "\n"
    if [[ "$1" != "--help"  ]] ; then
        /usr/bin/exa $EXA_OPTS
    fi
fi
)

## ----------------- cp
## Description :
## Aliases and improvements on copy command.

# If cp without options is used, use fzf to select multiple files, with bat previews,
# and copy them to dir you want. Use tab to select multiple files.
function cp() (

local SOURCES TARGET REPLY

if [[ "$#" -eq 0 ]] ; then

    yellow "\n\n  Use full path, not variables. i.e: /home/user/docs/etc"
    yellow "  I run no checks on the destination. Make sure it's right. \n\n"
    read -e -p 'Copy full path Destination : ' -i "$TARGET" TARGET
    echo "$TARGET"

    # On empty target clear, relist files, let user know target was empty.
    if [ -z "$TARGET" ] ; then
        command /usr/bin/clear && /usr/bin/exa $EXA_OPTS
        red "\n\n  No destination specified. Canceled copy. \n"
        return 1
    fi

    # This corrects issue where directory is not found as ~ is
    # not expanded properly when stored directly from user input
    if echo "$TARGET" | grep -q "~"; then
        TARGET=$(echo $TARGET | sed 's/~//')
        TARGET=~/$TARGET
    fi

    # Prompt user interactively to select multiple files with tab + fuzzy search.
    SOURCES=$(/usr/bin/fd --hidden \
                          --color=always \
                          --no-ignore-vcs \
                          --maxdepth=1 \
            | /usr/bin/fzf $FZF_OPTS --ansi \
            						 --marker='cp' \
            						 --multi \
		                             --preview="fzf-preview "./{}"" \
		                             --preview-window=right,75%)
    echo -e "\n"
    echo "$SOURCES" | xargs -I '{}' /usr/bin/cp -fv {} '/'"$TARGET"'/'
    echo -e "\n"
    /usr/bin/exa $EXA_OPTS
else
    echo -e "\n"
    /usr/bin/cp -fv "$@"
    echo -e "\n"

    if [[ "$1" != "--help"  ]] ; then
        /usr/bin/exa $EXA_OPTS
    fi
fi
)


## ----------------- mv
## Description :
## Aliases and improvements on move command.

# If mv without options is used, use fzf to select multiple files, with bat previews,
# and move them to dir you want. Use tab to select multiple files.
function mv() (

local SOURCES TARGET REPLY

if [[ "$#" -eq 0 ]] ; then

    yellow "\n\n  Use tab to select multiple files to move on fzf page."
    yellow "  Use full path, not variables. i.e /path/to/directory"
    yellow "  I run no checks on the destination. Make sure it's right. \n\n"
    read -e -p 'Move full path destination : ' -i "$TARGET" TARGET
    echo "$TARGET"
    # On empty target, relist files, let user know target was empty.
    if [ -z "$TARGET" ] ; then
        /usr/bin/exa $EXA_OPTS
        red "\n\n  No destination specified. Canceled move. \n"
        return 1
    fi
    # This corrects issue where directory is not found as ~ is
    # not expanded  properly When stored directly from user input
    if echo "$TARGET" | grep -q "~"; then
        TARGET=$(echo $TARGET | sed 's/~//')
        TARGET=~/$TARGET
    fi
    # Prompt user interactively to select multiple files with tab + fuzzy search.
    SOURCES=$(/usr/bin/fd --hidden \
                   		  --color=always \
                   		  --no-ignore-vcs \
                          --maxdepth=1 \
            | /usr/bin/fzf $FZF_OPTS --ansi \
            						 --marker='mv' \
            						 --multi \
                                     --preview="fzf-preview "./{}"" \
                                     --preview-window=right,70%)
    echo -e "\n"
    # We use xargs to capture filenames with spaces in them properly
    echo "$SOURCES" | xargs -I '{}' mv -fv {} '/'$TARGET'/'
    /usr/bin/exa $EXA_OPTS
else
    echo -e "\n"
    /usr/bin/mv -fv "$@"
	echo -e "\n"
    if [[ "$1" != "--help"  ]] ; then
        /usr/bin/exa $EXA_OPTS
    fi

fi
)

## ----------------- man
## Description :
## Aliases and improvements on man command.

# Man without options will use fzf to select a page, with page previews.
function man() (

local MAN="/usr/bin/man"

if [ -n "$1" ]; then
	$MAN "$@"
    return $?
else
	$MAN -k . | /usr/bin/fzf --reverse \
                             --prompt='Search : ' \
                             --preview="echo {1} | sed 's/(.*//' \
                      					         | xargs $MAN -P 'bat --color=always'" \
                       					         | awk '{print $1}' \
                       					         | sed 's/(.*//' \
                       					         | xargs $MAN
fi
# After finished, relist files
/usr/bin/exa $EXA_OPTS
)

## ----------------- help
# Description :
# Aliases and improvements on help commands.

# Use fzf to list and preview my help/preview folder.
# Selecting a file uses micro to edit it. "h", or "help" followed
# by a command prints colored output to terminal for that command.
# ie: h bat, help bat
function help() {
/usr/bin/clear
# This uses bat utility to colorize --help output on all help commands.
helpme() { "$@" --help 2>&1 | /usr/bin/bat $BAT_OPTS --language=help ; }
helpme "$1"
}
alias h="help"

## ----------------- micro
# Description :
# Aliases and improvements on micro command.

# Micro editor wrapper. Micro command used alone uses fzf as file previewer/selctor. m aliased to micro.
function micro() {

local files

if [[ "$#" -eq 0 ]]; then
	files=$(/usr/bin/fd --hidden \
    		            --color=always \
       		            --type=f \
       		            --no-ignore-vcs \
                        --maxdepth=1 \
       		| /usr/bin/fzf $FZF_OPTS --ansi \
       		                           --preview-window=bottom,75% \
      		                           --preview="fzf-preview "{}"" )
	# We use xargs to capture filenames with spaces in them properly
    echo "$files" | xargs -I '{}' fzf-open '{}'
else
	/usr/bin/micro "$@"
fi
}
alias m="micro"

# ----------------- env
## Description :
## Aliases and improvements for env command.

# A color wrapper for env.
# If env is used without arguments, use bat to colorize output.
function env() {

if [[ -n "$1" ]] ; then
	/usr/bin/env "$@"
else
	/usr/bin/env | /usr/bin/bat $BAT_OPTS --language=bash | sort
fi
}

# ----------------- alias
## Description :
## Aliases and improvements for alias command.

# A color wrapper for alias.
# If alias is  used without arguments, use bat to colorize output.
function alias() {

if [[ "$#" -eq 0 ]] ; then
	builtin alias -p | /usr/bin/bat $BAT_OPTS --language=bash
else
	builtin alias "$@"
fi
}

# ----------------- history
## Description :
## Aliases and improvements for history command.

# A color wrapper for history.
# If history is  used without arguments, use bat to colorize output.
function history() {

if [[ "$#" -eq 0 ]] ; then
    # Using "less" as the language only because it gave the nicest output.
	builtin history | /usr/bin/bat $BAT_OPTS --language=less
else
	builtin history "$@"
fi
}

# ----------------- export
## Description :
## Aliases and improvements for export command.

# A color wrapper for export.
# If export is  used without arguments, use bat to colorize output.
function export() {

if [[ "$#" -eq 0 ]] ; then
	builtin export | /usr/bin/bat $BAT_OPTS --language=bash
else
	builtin export "$@"
fi
}

## ----------------- touch
## Description :
## Aliases and improvements on touch command.

# Stupid touch wrapper to clear and relist files after using touch automatically.
function touch() {
if [[ "$1" != "--help" ]] ; then
	/usr/bin/touch "$@"
	/usr/bin/clear
	/usr/bin/exa $EXA_OPTS
else
	/usr/bin/touch "$@"
fi
}

## ----------------- mkdir
## Description :
## Aliases and improvements on mkdir command.

# Stupid mkdir wrapper to clear and relist files after using mkdir automatically.
function mkdir() {

if [[ "$1" != "--help" ]] ; then
	/usr/bin/clear
	/usr/bin/mkdir "$@"
    /usr/bin/exa $EXA_OPTS
else
	/usr/bin/mkdir "$@"
fi
}

## -----------------  -----------------  -----------------  -----------------  -----------------
